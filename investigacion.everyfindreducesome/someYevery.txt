Los métodos some y every en JavaScript, al igual que métodos como filter, map y forEach, son métodos que nos permiten analizar los elementos de un array mediante el uso de una función. En el caso de estos métodos, las funciones que les insertemos se usarán como condiciones. Entonces, lo que harán estos métodos será analizar si los elementos del array determinado cumplen o no esta condición.

Mientras que los métodos filter y map nos devuelven un nuevo array con los elementos filtrados o modificados, el método forEach no nos devuelve nada. Los métodos some y every también tienen un resultado diferente. En vez de obtener un nuevo array, con estos obtendremos una respuesta booleana, es decir, un resultado true o false. A continuación, te explicamos bajo qué condiciones obtendremos cada resultado.

Some
El método some de JavaScript analiza cada elemento de un array a partir de la función que le pasemos. Como su nombre indica, este método nos devolverá el resultado true cuando alguno de los elementos del array cumpla la condición insertada. De manera lógica, este método nos devolverá el resultado false solo si ninguno de los elementos del array cumple con la condición.

Para usar el método some, insertamos el mismo comando de cualquier método array.método. Luego, entre sus paréntesis, insertamos la función que queremos usar como condición a analizar. Para usar una función como parámetro, podemos insertar su operación directamente o llamarla por su nombre.

A continuación, te presentamos un ejemplo de cómo usar el método some. En primer lugar, imagina que tenemos el siguiente array, que enlista distintos strings de colores.

const arrayColores = [‘rojo’, ‘azul’, ‘amarillo’, ‘aguamarina’, ‘verde’]

Ahora, podemos utilizar el método some para encontrar si alguno de los strings en este arreglo tienen una longitud con un número par. Para ello, utilizaremos el operador aritmético de módulo. Para definir esta condición, insertaremos la función en una constante longitudPar:

const longitudPar = (element) element.length % 2 === 0

Entonces, podemos llamar a esta constante para usar su función como parámetro en el método some. Para obtener este resultado pintado en nuestra terminal, usamos el comando console.log:

console.log (arrayColores.some (longitudPar))

// resultado: true

Ten presente que, si analizamos un array vacío con el método some, siempre obtendremos como resultado false, como puedes ver a continuación:

const arrayVacío = [ ]

const null = (item) => item === null

console.log (arrayVacío.some (null))

// resultado: false

Al igual que en otros métodos, aquí puedes llamar al elemento analizado de cualquier forma. Antes hemos usado element, ahora item. Lo importante es que lo uses como parámetro en tu función.

Every
Los métodos some y every en JavaScript funcionan de manera muy similar, pero tienen resultados diferentes. El método every de JavaScript analiza cada elemento del array determinado y nos devuelve un resultado true solo si todos los elementos del array cumplen la condición.

Para ejemplificar el uso de este método, utilicemos el mismo array ‘arrayColores’ y la función ‘longitudPar’ del ejemplo anterior:

const arrayColores = [‘rojo’, ‘azul’, ‘amarillo’, ‘aguamarina’, ‘verde’]

const longitudPar = (element) element.length % 2 === 0

Ahora, para pintar el resultado que obtendremos por nuestra terminal, basta con cambiar la palabra some a every, como verás en la siguiente línea:

console.log (arrayColores.every (longitudPar))

// resultado: false

Como puedes observar, aunque los métodos some y every en JavaScript ejecutan el mismo análisis, sus resultados son diferentes. En este caso, el hecho de que solo el string ‘verde’ tenga un número impar es suficiente para que el resultado pase a ser falso.

Ten presente que, si utilizamos el método every para analizar un array vacío, siempre obtendremos el resultado true, sea cual sea la condición que hemos definido. Lo puedes ver en el siguiente ejemplo de código:

const arrayVacío = [ ]

const null = (item) => item === null

console.log (arrayVacío.every (null))

// resultado: true
